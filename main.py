import requests
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
import time
from datetime import datetime
from telegram import Bot, Update
from telegram.ext import CommandHandler, Updater, MessageHandler, Filters
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
REGIONS = [
    "sankt-peterburg_i_lo",  # –°–ü–± –∏ –õ–û
    "sankt-peterburg"  # –¢–æ–ª—å–∫–æ –°–ü–±
]
REQUEST_DELAY = 20  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
MAX_QUERIES = 10  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


def get_random_headers():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    ua = UserAgent()
    return {
        'User-Agent': ua.random,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'DNT': '1',
        'Upgrade-Insecure-Requests': '1'
    }


def fetch_avito_page(query, region):
    """
    –ü–æ–ª—É—á–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞
        url = f"https://www.avito.ru/{region}?q={requests.utils.quote(query)}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = requests.get(
            url,
            headers=get_random_headers(),
            timeout=25  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
        if "captcha" in response.text.lower():
            raise Exception("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")

        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ({region}): {e}")
        return None


def parse_ads(html):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ HTML
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{'id': '123', 'title': '...'}, ...]
    """
    try:
        soup = BeautifulSoup(html, 'html.parser')
        ads = []

        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        for item in soup.select('div[data-marker="item"]'):
            ad_id = item.get('data-item-id', '')
            title_elem = item.select_one('[itemprop="name"]')
            title = title_elem.text.strip() if title_elem else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            ads.append({'id': ad_id, 'title': title})

        return ads
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []


def find_ad_position(ads, target_id):
    """–ò—â–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
    for position, ad in enumerate(ads, start=1):
        if ad['id'] == target_id:
            return position
    return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"


def get_region_name(region_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –∫–æ–¥—É"""
    names = {
        "sankt-peterburg_i_lo": "–°–ü–± –∏ –õ–û",
        "sankt-peterburg": "–°–ü–±"
    }
    return names.get(region_code, region_code)


def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø AvitoPositionProbe ü§ñ\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ –≤ –¥–≤—É—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö:\n"
        "- –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û\n"
        "- –¢–æ–ª—å–∫–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n\n"
        "üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: /set_ad_id [ID]\n"
        "2. –ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: /check\n"
        "3. –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–º–∞–∫–∏—è–∂ –∏ –ø—Ä–∏—á–µ—Å–∫–∞\n"
        "–≤–∏–∑–∞–∂–∏—Å—Ç —Å –≤—ã–µ–∑–¥–æ–º</code>"
    )
    update.message.reply_text(help_text, parse_mode="HTML")


def set_ad_id(update: Update, context):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    args = context.args

    if not args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /set_ad_id 2140172843")
        return

    ad_id = args[0]
    user_data[user_id] = {'ad_id': ad_id}
    update.message.reply_text(f"‚úÖ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ad_id}\n–û—Ç–ø—Ä–∞–≤—å /check –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")


def check(update: Update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if user_id not in user_data or 'ad_id' not in user_data[user_id]:
        update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /set_ad_id")
        return

    update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ –¥–≤—É—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–º–∞–∫–∏—è–∂ –∏ –ø—Ä–∏—á–µ—Å–∫–∞\n"
        "–≤–∏–∑–∞–∂–∏—Å—Ç —Å –≤—ã–µ–∑–¥–æ–º</code>",
        parse_mode="HTML"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    user_data[user_id]['awaiting_queries'] = True


def handle_queries(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
    user_id = update.effective_user.id
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –∑–∞–ø—Ä–æ—Å—ã
    if user_id not in user_data or not user_data[user_id].get('awaiting_queries'):
        return

    text = update.message.text.strip()
    queries = [q.strip() for q in text.split('\n') if q.strip()]

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    if len(queries) > MAX_QUERIES:
        queries = queries[:MAX_QUERIES]
        update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–≤—ã—Ö {MAX_QUERIES} –∑–∞–ø—Ä–æ—Å–æ–≤")

    if not queries:
        update.message.reply_text("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    user_data[user_id]['queries'] = queries
    user_data[user_id]['awaiting_queries'] = False

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    update.message.reply_text(
        f"üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 2 —Ä–µ–≥–∏–æ–Ω–∞—Ö –¥–ª—è {user.first_name}...\n"
        f"‚è± –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {len(queries) * 2 * 25 // 60} –º–∏–Ω—É—Ç"
    )
    process_queries(update, user_id)


def process_queries(update: Update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    try:
        target_id = user_data[user_id]['ad_id']
        queries = user_data[user_id]['queries']
        results = []
        total_checks = len(queries) * len(REGIONS)
        current_check = 0

        for query in queries:
            query_results = []

            for region in REGIONS:
                current_check += 1
                region_name = get_region_name(region)

                # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
                status = (
                    f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ {current_check}/{total_checks}\n"
                    f"‚Ä¢ –ó–∞–ø—Ä–æ—Å: {query}\n"
                    f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {region_name}"
                )
                update.message.reply_text(status)

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                html = fetch_avito_page(query, region)

                if not html:
                    query_results.append(f"‚ùå {region_name}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                    continue

                # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                ads = parse_ads(html)

                # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é
                position = find_ad_position(ads, target_id)
                check_time = datetime.now().strftime('%H:%M:%S')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = f"‚Ä¢ {region_name}: –ø–æ–∑–∏—Ü–∏—è {position} ({check_time})"
                query_results.append(result)

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                time.sleep(REQUEST_DELAY)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            results.append(
                f"üîπ *{query}*\n" +
                "\n".join(query_results)
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = "\n\n".join(results)
        final_report = (
            f"üìä *–û—Ç—á–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º*\n\n"
            f"{report}\n\n"
            f"üÜî *ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:* `{target_id}`\n"
            f"‚è± *–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* {datetime.now().strftime('%H:%M:%S')}"
        )
        update.message.reply_text(
            final_report,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
        update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def error_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if update.effective_message:
        update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = Bot(token=TOKEN)
    updater = Updater(bot=bot, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("set_ad_id", set_ad_id, pass_args=True))
    dp.add_handler(CommandHandler("check", check))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_queries))
    dp.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º –¥–≤—É—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: –°–ü–± –∏ –°–ü–±+–õ–û")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()